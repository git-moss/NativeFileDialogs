// Written by Jürgen Moßgraber - mossgrabers.de
// (c) 2019-2021
// Licensed under LGPLv3 - http://www.gnu.org/licenses/lgpl-3.0.txt

package de.mossgrabers.nativefiledialogs.windows;

import com.sun.jna.Native;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.WString;

import java.io.File;
import java.util.Arrays;
import java.util.List;


/**
 * Mapping for the necessary Comdlg32 functions.
 *
 * @author J&uuml;rgen Mo&szlig;graber
 */
public class Comdlg32
{
    /**
     * Causes the Read Only check box to be selected initially when the dialog box is created. This
     * flag indicates the state of the Read Only check box when the dialog box is closed.
     */
    public static final int OFN_READONLY             = 0x00000001;
    /**
     * Causes the Save As dialog box to generate a message box if the selected file already exists.
     * The user must confirm whether to overwrite the file.
     */
    public static final int OFN_OVERWRITEPROMPT      = 0x00000002;
    /** Hides the Read Only check box. */
    public static final int OFN_HIDEREADONLY         = 0x00000004;
    /**
     * Restores the current directory to its original value if the user changed the directory while
     * searching for files. This flag is ineffective for GetOpenFileName.
     */
    public static final int OFN_NOCHANGEDIR          = 0x00000008;
    /**
     * Causes the dialog box to display the Help button. The hwndOwner member must specify the
     * window to receive the HELPMSGSTRING registered messages that the dialog box sends when the
     * user clicks the Help button. An Explorer-style dialog box sends a CDN_HELP notification
     * message to your hook procedure when the user clicks the Help button.
     */
    public static final int OFN_SHOWHELP             = 0x00000010;
    /** Enables the hook function specified in the lpfnHook member. */
    public static final int OFN_ENABLEHOOK           = 0x00000020;
    /**
     * The lpTemplateName member is a pointer to the name of a dialog template resource in the
     * module identified by the hInstance member. If the OFN_EXPLORER flag is set, the system uses
     * the specified template to create a dialog box that is a child of the default Explorer-style
     * dialog box. If the OFN_EXPLORER flag is not set, the system uses the template to create an
     * old-style dialog box that replaces the default dialog box.
     */
    public static final int OFN_ENABLETEMPLATE       = 0x00000040;
    /**
     * The hInstance member identifies a data block that contains a preloaded dialog box template.
     * The system ignores lpTemplateName if this flag is specified. If the OFN_EXPLORER flag is set,
     * the system uses the specified template to create a dialog box that is a child of the default
     * Explorer-style dialog box. If the OFN_EXPLORER flag is not set, the system uses the template
     * to create an old-style dialog box that replaces the default dialog box.
     */
    public static final int OFN_ENABLETEMPLATEHANDLE = 0x00000080;
    /**
     * The common dialog boxes allow invalid characters in the returned file name. Typically, the
     * calling application uses a hook procedure that checks the file name by using the FILEOKSTRING
     * message. If the text box in the edit control is empty or contains nothing but spaces, the
     * lists of files and directories are updated. If the text box in the edit control contains
     * anything else, nFileOffset and nFileExtension are set to values generated by parsing the
     * text. No default extension is added to the text, nor is text copied to the buffer specified
     * by lpstrFileTitle. If the value specified by nFileOffset is less than zero, the file name is
     * invalid. Otherwise, the file name is valid, and nFileExtension and nFileOffset can be used as
     * if the OFN_NOVALIDATE flag had not been specified.
     */
    public static final int OFN_NOVALIDATE           = 0x00000100;
    /**
     * The File Name list box allows multiple selections. If you also set the OFN_EXPLORER flag, the
     * dialog box uses the Explorer-style user interface; otherwise, it uses the old-style user
     * interface.
     */
    public static final int OFN_ALLOWMULTISELECT     = 0x00000200;
    /**
     * The user typed a file name extension that differs from the extension specified by
     * lpstrDefExt. The function does not use this flag if lpstrDefExt is NULL.
     */
    public static final int OFN_EXTENSIONDIFFERENT   = 0x00000400;
    /**
     * The user can type only valid paths and file names. If this flag is used and the user types an
     * invalid path and file name in the File Name entry field, the dialog box function displays a
     * warning in a message box.
     */
    public static final int OFN_PATHMUSTEXIST        = 0x00000800;
    /**
     * The user can type only names of existing files in the File Name entry field. If this flag is
     * specified and the user enters an invalid name, the dialog box procedure displays a warning in
     * a message box. If this flag is specified, the OFN_PATHMUSTEXIST flag is also used. This flag
     * can be used in an Open dialog box. It cannot be used with a Save As dialog box.
     */
    public static final int OFN_FILEMUSTEXIST        = 0x00001000;
    /**
     * If the user specifies a file that does not exist, this flag causes the dialog box to prompt
     * the user for permission to create the file. If the user chooses to create the file, the
     * dialog box closes and the function returns the specified name; otherwise, the dialog box
     * remains open. If you use this flag with the OFN_ALLOWMULTISELECT flag, the dialog box allows
     * the user to specify only one nonexistent file.
     */
    public static final int OFN_CREATEPROMPT         = 0x00002000;
    /**
     * Specifies that if a call to the OpenFile function fails because of a network sharing
     * violation, the error is ignored and the dialog box returns the selected file name. If this
     * flag is not set, the dialog box notifies your hook procedure when a network sharing violation
     * occurs for the file name specified by the user. If you set the OFN_EXPLORER flag, the dialog
     * box sends the CDN_SHAREVIOLATION message to the hook procedure. If you do not set
     * OFN_EXPLORER, the dialog box sends the SHAREVISTRING registered message to the hook
     * procedure.
     */
    public static final int OFN_SHAREAWARE           = 0x00004000;
    /**
     * The returned file does not have the Read Only check box selected and is not in a
     * write-protected directory.
     */
    public static final int OFN_NOREADONLYRETURN     = 0x00008000;
    /**
     * The file is not created before the dialog box is closed. This flag should be specified if the
     * application saves the file on a create-nonmodify network share. When an application specifies
     * this flag, the library does not check for write protection, a full disk, an open drive door,
     * or network protection. Applications using this flag must perform file operations carefully,
     * because a file cannot be reopened once it is closed.
     */
    public static final int OFN_NOTESTFILECREATE     = 0x00010000;
    /** Hides and disables the Network button. */
    public static final int OFN_NONETWORKBUTTON      = 0x00020000;
    /**
     * For old-style dialog boxes, this flag causes the dialog box to use short file names (8.3
     * format). Explorer-style dialog boxes ignore this flag and always display long file names.
     */
    public static final int OFN_NOLONGNAMES          = 0x00040000;
    /**
     * Indicates that any customizations made to the Open or Save As dialog box use the
     * Explorer-style customization methods. For more information, see Explorer-Style Hook
     * Procedures and Explorer-Style Custom Templates.
     */
    public static final int OFN_EXPLORER             = 0x00080000;
    /**
     * Directs the dialog box to return the path and file name of the selected shortcut (.LNK) file.
     * If this value is not specified, the dialog box returns the path and file name of the file
     * referenced by the shortcut.
     */
    public static final int OFN_NODEREFERENCELINKS   = 0x00100000;
    /**
     * For old-style dialog boxes, this flag causes the dialog box to use long file names. If this
     * flag is not specified, or if the OFN_ALLOWMULTISELECT flag is also set, old-style dialog
     * boxes use short file names (8.3 format) for file names with spaces. Explorer-style dialog
     * boxes ignore this flag and always display long file names.
     */
    public static final int OFN_LONGNAMES            = 0x00200000;
    /**
     * Causes the dialog box to send CDN_INCLUDEITEM notification messages to your OFNHookProc hook
     * procedure when the user opens a folder. The dialog box sends a notification for each item in
     * the newly opened folder. These messages enable you to control which items the dialog box
     * displays in the folder's item list.
     */
    public static final int OFN_ENABLEINCLUDENOTIFY  = 0x00400000;
    /**
     * Enables the Explorer-style dialog box to be resized using either the mouse or the keyboard.
     * By default, the Explorer-style Open and Save As dialog boxes allow the dialog box to be
     * resized regardless of whether this flag is set. This flag is necessary only if you provide a
     * hook procedure or custom template. The old-style dialog box does not permit resizing.
     */
    public static final int OFN_ENABLESIZING         = 0x00800000;
    /**
     * Prevents the system from adding a link to the selected file in the file system directory that
     * contains the user's most recently used documents. To retrieve the location of this directory,
     * call the SHGetSpecialFolderLocation function with the CSIDL_RECENT flag.
     */
    public static final int OFN_DONTADDTORECENT      = 0x02000000;
    /**
     * Forces the showing of system and hidden files, thus overriding the user setting to show or
     * not show hidden files. However, a file that is marked both system and hidden is not shown.
     */
    public static final int OFN_FORCESHOWHIDDEN      = 0x10000000;

    /**
     * The dialog box could not be created. The common dialog box function's call to the DialogBox
     * function failed. For example, this error occurs if the common dialog box call specifies an
     * invalid window handle.
     */
    public static final int CDERR_DIALOGFAILURE      = 0xFFFF;
    /** The common dialog box function failed to find a specified resource. */
    public static final int CDERR_FINDRESFAILURE     = 0x0006;
    /**
     * The common dialog box function failed during initialization. This error often occurs when
     * sufficient memory is not available.
     */
    public static final int CDERR_INITIALIZATION     = 0x0002;
    /** The common dialog box function failed to load a specified resource. */
    public static final int CDERR_LOADRESFAILURE     = 0x0007;
    /** The common dialog box function failed to load a specified string. */
    public static final int CDERR_LOADSTRFAILURE     = 0x0005;
    /** The common dialog box function failed to lock a specified resource. */
    public static final int CDERR_LOCKRESFAILURE     = 0x0008;
    /** The common dialog box function was unable to allocate memory for internal structures. */
    public static final int CDERR_MEMALLOCFAILURE    = 0x0009;
    /** The common dialog box function was unable to lock the memory associated with a handle. */
    public static final int CDERR_MEMLOCKFAILURE     = 0x000A;
    /**
     * The ENABLETEMPLATE flag was set in the Flags member of the initialization structure for the
     * corresponding common dialog box, but you failed to provide a corresponding instance handle.
     */
    public static final int CDERR_NOHINSTANCE        = 0x0004;
    /**
     * The ENABLEHOOK flag was set in the Flags member of the initialization structure for the
     * corresponding common dialog box, but you failed to provide a pointer to a corresponding hook
     * procedure.
     */
    public static final int CDERR_NOHOOK             = 0x000B;
    /**
     * The RegisterWindowMessage function returned an error code when it was called by the common
     * dialog box function.
     */
    public static final int CDERR_REGISTERMSGFAIL    = 0x000C;
    /**
     * The ENABLETEMPLATE flag was set in the Flags member of the initialization structure for the
     * corresponding common dialog box, but you failed to provide a corresponding template.
     */
    public static final int CDERR_NOTEMPLATE         = 0x0003;
    /**
     * The lStructSize member of the initialization structure for the corresponding common dialog
     * box is invalid.
     */
    public static final int CDERR_STRUCTSIZE         = 0x0001;
    /**
     * The buffer pointed to by the lpstrFile member of the OPENFILENAME structure is too small for
     * the file name specified by the user. The first two bytes of the lpstrFile buffer contain an
     * integer value specifying the size required to receive the full name, in characters.
     */
    public static final int FNERR_SUBCLASSFAILURE    = 0x3001;
    /** A file name is invalid. */
    public static final int FNERR_INVALIDFILENAME    = 0x3002;
    /** An attempt to subclass a list box failed because sufficient memory was not available. */
    public static final int FNERR_BUFFERTOOSMALL     = 0x3003;

    static
    {
        Native.register ("comdlg32");
    }

    /**
     * Creates an Open dialog box that lets the user specify the drive, directory, and the name of a
     * file or set of files to be opened.
     *
     * @param params A pointer to an OPENFILENAME structure that contains information used to
     *            initialize the dialog box. When GetOpenFileName returns, this structure contains
     *            information about the user's file selection.
     * @return True if a file was selected
     */
    public static native boolean GetOpenFileNameW (OpenFileName params);


    /**
     * Creates a Save dialog box that lets the user specify the drive, directory, and name of a file
     * to save.
     *
     * @param params A pointer to an OPENFILENAME structure that contains information used to
     *            initialize the dialog box. When GetSaveFileName returns, this structure contains
     *            information about the user's file selection.
     * @return True if a file was selected
     */
    public static native boolean GetSaveFileNameW (OpenFileName params);


    /**
     * Returns a common dialog box error code. This code indicates the most recent error to occur
     * during the execution of one of the common dialog box functions.
     *
     * @return If the most recent call to a common dialog box function succeeded, the return value
     *         is undefined. If the common dialog box function returned FALSE because the user
     *         closed or canceled the dialog box, the return value is zero. Otherwise, the return
     *         value is a nonzero error code.
     */
    public static native int CommDlgExtendedError ();

    /**
     * Contains information that the GetOpenFileName and GetSaveFileName functions use to initialize
     * an Open or Save As dialog box. After the user closes the dialog box, the system returns
     * information about the user's selection in this structure.
     */
    public static class OpenFileName extends Structure
    {
        /** The length, in bytes, of the structure. */
        public int     lStructSize;
        /**
         * A handle to the window that owns the dialog box. This member can be any valid window
         * handle, or it can be NULL if the dialog box has no owner.
         */
        public Pointer hwndOwner;
        /**
         * If the OFN_ENABLETEMPLATEHANDLE flag is set in the Flags member, hInstance is a handle to
         * a memory object containing a dialog box template. If the OFN_ENABLETEMPLATE flag is set,
         * hInstance is a handle to a module that contains a dialog box template named by the
         * lpTemplateName member. If neither flag is set, this member is ignored. If the
         * OFN_EXPLORER flag is set, the system uses the specified template to create a dialog box
         * that is a child of the default Explorer-style dialog box. If the OFN_EXPLORER flag is not
         * set, the system uses the template to create an old-style dialog box that replaces the
         * default dialog box.
         */
        public Pointer hInstance;
        /**
         * A buffer containing pairs of null-terminated filter strings. The last string in the
         * buffer must be terminated by two NULL characters.
         */
        public WString lpstrFilter;
        /**
         * A static buffer that contains a pair of null-terminated filter strings for preserving the
         * filter pattern chosen by the user. The first string is your display string that describes
         * the custom filter, and the second string is the filter pattern selected by the user. The
         * first time your application creates the dialog box, you specify the first string, which
         * can be any nonempty string. When the user selects a file, the dialog box copies the
         * current filter pattern to the second string. The preserved filter pattern can be one of
         * the patterns specified in the lpstrFilter buffer, or it can be a filter pattern typed by
         * the user. The system uses the strings to initialize the user-defined file filter the next
         * time the dialog box is created. If the nFilterIndex member is zero, the dialog box uses
         * the custom filter.
         */
        public WString lpstrCustomFilter;
        /**
         * The size, in characters, of the buffer identified by lpstrCustomFilter. This buffer
         * should be at least 40 characters long. This member is ignored if lpstrCustomFilter is
         * NULL or points to a NULL string.
         */
        public int     nMaxCustFilter;
        /**
         * The index of the currently selected filter in the File Types control. The buffer pointed
         * to by lpstrFilter contains pairs of strings that define the filters. The first pair of
         * strings has an index value of 1, the second pair 2, and so on. An index of zero indicates
         * the custom filter specified by lpstrCustomFilter. You can specify an index on input to
         * indicate the initial filter description and filter pattern for the dialog box. When the
         * user selects a file, nFilterIndex returns the index of the currently displayed filter. If
         * nFilterIndex is zero and lpstrCustomFilter is NULL, the system uses the first filter in
         * the lpstrFilter buffer. If all three members are zero or NULL, the system does not use
         * any filters and does not show any files in the file list control of the dialog box.
         */
        public int     nFilterIndex;
        /**
         * The file name used to initialize the File Name edit control. The first character of this
         * buffer must be NULL if initialization is not necessary. When the GetOpenFileName or
         * GetSaveFileName function returns successfully, this buffer contains the drive designator,
         * path, file name, and extension of the selected file.
         *
         * If the OFN_ALLOWMULTISELECT flag is set and the user selects multiple files, the buffer
         * contains the current directory followed by the file names of the selected files. For
         * Explorer-style dialog boxes, the directory and file name strings are NULL separated, with
         * an extra NULL character after the last file name. For old-style dialog boxes, the strings
         * are space separated and the function uses short file names for file names with spaces.
         * You can use the FindFirstFile function to convert between long and short file names. If
         * the user selects only one file, the lpstrFile string does not have a separator between
         * the path and file name.
         *
         * If the buffer is too small, the function returns FALSE and the CommDlgExtendedError
         * function returns FNERR_BUFFERTOOSMALL. In this case, the first two bytes of the lpstrFile
         * buffer contain the required size, in bytes or characters..
         */
        public Pointer lpstrFile;
        /**
         * The size, in characters, of the buffer pointed to by lpstrFile. The buffer must be large
         * enough to store the path and file name string or strings, including the terminating NULL
         * character. The GetOpenFileName and GetSaveFileName functions return FALSE if the buffer
         * is too small to contain the file information. The buffer should be at least 256
         * characters long.
         */
        public int     nMaxFile;
        /**
         * The file name and extension (without path information) of the selected file. This member
         * can be NULL.
         */
        public String  lpstrFileTitle;
        /**
         * The size, in characters, of the buffer pointed to by lpstrFileTitle. This member is
         * ignored if lpstrFileTitle is NULL.
         */
        public int     nMaxFileTitle;
        /**
         * The initial directory. The algorithm for selecting the initial directory varies on
         * different platforms.
         */
        public String  lpstrInitialDir;
        /**
         * A string to be placed in the title bar of the dialog box. If this member is NULL, the
         * system uses the default title (that is, Save As or Open).
         */
        public WString lpstrTitle;
        /**
         * A set of bit flags you can use to initialize the dialog box. When the dialog box returns,
         * it sets these flags to indicate the user's input. This member can be a combination of the
         * following flags.
         */
        public int     Flags;
        /**
         * The zero-based offset, in characters, from the beginning of the path to the file name in
         * the string pointed to by lpstrFile. For the ANSI version, this is the number of bytes;
         * for the Unicode version, this is the number of characters. For example, if lpstrFile
         * points to the following string, "c:\dir1\dir2\file.ext", this member contains the value
         * 13 to indicate the offset of the "file.ext" string. If the user selects more than one
         * file, nFileOffset is the offset to the first file name.
         */
        public short   nFileOffset;
        /**
         * The zero-based offset, in characters, from the beginning of the path to the file name
         * extension in the string pointed to by lpstrFile. For the ANSI version, this is the number
         * of bytes; for the Unicode version, this is the number of characters. Usually the file
         * name extension is the substring which follows the last occurrence of the dot (".")
         * character. For example, txt is the extension of the filename readme.txt, html the
         * extension of readme.txt.html. Therefore, if lpstrFile points to the string
         * "c:\dir1\dir2\readme.txt", this member contains the value 20. If lpstrFile points to the
         * string "c:\dir1\dir2\readme.txt.html", this member contains the value 24. If lpstrFile
         * points to the string "c:\dir1\dir2\readme.txt.html.", this member contains the value 29.
         * If lpstrFile points to a string that does not contain any "." character such as
         * "c:\dir1\dir2\readme", this member contains zero.
         */
        public short   nFileExtension;
        /**
         * The default extension. GetOpenFileName and GetSaveFileName append this extension to the
         * file name if the user fails to type an extension. This string can be any length, but only
         * the first three characters are appended. The string should not contain a period (.). If
         * this member is NULL and the user fails to type an extension, no extension is appended.
         */
        public String  lpstrDefExt;
        /**
         * Application-defined data that the system passes to the hook procedure identified by the
         * lpfnHook member. When the system sends the WM_INITDIALOG message to the hook procedure,
         * the message's lParam parameter is a pointer to the OPENFILENAME structure specified when
         * the dialog box was created. The hook procedure can use this pointer to get the lCustData
         * value.
         */
        public Pointer lCustData;
        /**
         * A pointer to a hook procedure. This member is ignored unless the Flags member includes
         * the OFN_ENABLEHOOK flag.
         */
        public Pointer lpfnHook;
        /**
         * The name of the dialog template resource in the module identified by the hInstance
         * member. For numbered dialog box resources, this can be a value returned by the
         * MAKEINTRESOURCE macro. This member is ignored unless the OFN_ENABLETEMPLATE flag is set
         * in the Flags member. If the OFN_EXPLORER flag is set, the system uses the specified
         * template to create a dialog box that is a child of the default Explorer-style dialog box.
         * If the OFN_EXPLORER flag is not set, the system uses the template to create an old-style
         * dialog box that replaces the default dialog box.
         */
        public Pointer lpTemplateName;

        /**
         * Constructor.
         */
        public OpenFileName ()
        {
            this.lStructSize = this.size ();
        }


        /**
         * Get the selected file, if any.
         *
         * @return The file or null
         */
        public File getSelectedFile ()
        {
            if (this.lpstrFile == null)
                return null;
            final String filePath = this.lpstrFile.getWideString (0);
            return new File (filePath);
        }


        /** {@inheritDoc} */
        @Override
        protected List<String> getFieldOrder ()
        {
            return Arrays.asList ("lStructSize", "hwndOwner", "hInstance", "lpstrFilter", "lpstrCustomFilter", "nMaxCustFilter", "nFilterIndex", "lpstrFile", "nMaxFile", "lpstrFileTitle", "nMaxFileTitle", "lpstrInitialDir", "lpstrTitle", "Flags", "nFileOffset", "nFileExtension", "lpstrDefExt", "lCustData", "lpfnHook", "lpTemplateName");
        }
    }
}